"use strict";

var copyToClipboard = function copyToClipboard(str) {
  var el = document.createElement('textarea'); // Create a <textarea> element

  el.value = str; // Set its value to the string that you want copied
  el.setAttribute('readonly', ''); // Make it readonly to be tamper-proof
  el.style.position = 'absolute';
  el.style.left = '-9999px'; // Move outside the screen to make it invisible

  document.body.appendChild(el); // Append the <textarea> element to the HTML document

  var selected = document.getSelection().rangeCount > 0 // Check if there is any content selected previously
  ? document.getSelection().getRangeAt(0) // Store selection if found
  : false; // Mark as false to know no selection existed before

  el.select(); // Select the <textarea> content

  document.execCommand('copy'); // Copy - only works as a result of a user action (e.g. click events)
  document.body.removeChild(el); // Remove the <textarea> element

  if (selected) {
    // If a selection existed before copying
    document.getSelection().removeAllRanges(); // Unselect everything on the HTML document
    document.getSelection().addRange(selected); // Restore the original selection
  }
};

var pluralize = function(count, noun, suffix = 's') {
  return `${count} ${noun}${count !== 1 ? suffix : ''}`;
}
  


function togglePassword(input) {
  var x = input;
  if (x.type === "password") {
    x.type = "text";
  } else {
    x.type = "password";
  }
}

function countdown(duration, display) {
  var timer = duration, minutes, seconds;
  setInterval(function () {
      minutes = parseInt(timer / 60, 10)
      seconds = parseInt(timer % 60, 10);

      display.textContent =  pluralize(minutes, $(display).data('minute')) + " " + pluralize(seconds, $(display).data('second'));

      if (--timer < 0) {
          timer = duration;
      }
  }, 1000);
}

$(function() {
  var buttonNames = ['Show options', 'Disable options']
  var createForm = $('form#createNode')

  // settings tooggle
  $(".settings-button").click(function(e){
    e.preventDefault();
    $(".settings-block").slideToggle(350, function(){
      var button = $('.settings-button div');
      if (button.text() === button.data('close')) {
        button.text(button.data('open'))
      } else {
        button.text(button.data('close'))
      }
    });
  });

  // read password tooggle
  $("#readWithPassword").click(function(e){
    var button = $(this);

    if (button.text() !== button.data('close')) {
      e.preventDefault();
      button.text(button.data('close'))
    }

    $(".slide-block").slideDown(350);
  });


  // create validate and submit
  createForm.validate({
    rules: {
      note: {
        required: true
      },
      password_repeat: {
        equalTo: "#password"
      }
    },
    submitHandler: function(form) {
      window.location = '/ready.html'
    }
  });

  // copy link
  $('#copyNote').on('click', function(){
    var textToCopy = $('#link').text();

    console.log(textToCopy)
    copyToClipboard(textToCopy);

    $('.tooltip-container').addClass('open');

    setTimeout(function(){
      $('.tooltip-container').removeClass('open');
    }, 1000)
  })

  $('#passToggleTrigger').on('click', function(){

    var input = $('#passToggle');
    var button = $('#passToggleTrigger');
    togglePassword(input[0])
    console.log('click 2', button.text());

    if (button.text() === button.data('close')) {
      button.text(button.data('open'))
    } else {
      button.text(button.data('close'))
    }
  })

  if ($('#countdown').length) {
    var fiveMinutes = 60 * 60,
    display = document.querySelector('#countdown');
  
    countdown(fiveMinutes, display);
  }
  
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGNvcHlUb0NsaXBib2FyZCA9IGZ1bmN0aW9uIGNvcHlUb0NsaXBib2FyZChzdHIpIHtcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTsgLy8gQ3JlYXRlIGEgPHRleHRhcmVhPiBlbGVtZW50XG5cbiAgZWwudmFsdWUgPSBzdHI7IC8vIFNldCBpdHMgdmFsdWUgdG8gdGhlIHN0cmluZyB0aGF0IHlvdSB3YW50IGNvcGllZFxuICBlbC5zZXRBdHRyaWJ1dGUoJ3JlYWRvbmx5JywgJycpOyAvLyBNYWtlIGl0IHJlYWRvbmx5IHRvIGJlIHRhbXBlci1wcm9vZlxuICBlbC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIGVsLnN0eWxlLmxlZnQgPSAnLTk5OTlweCc7IC8vIE1vdmUgb3V0c2lkZSB0aGUgc2NyZWVuIHRvIG1ha2UgaXQgaW52aXNpYmxlXG5cbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbCk7IC8vIEFwcGVuZCB0aGUgPHRleHRhcmVhPiBlbGVtZW50IHRvIHRoZSBIVE1MIGRvY3VtZW50XG5cbiAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCkucmFuZ2VDb3VudCA+IDAgLy8gQ2hlY2sgaWYgdGhlcmUgaXMgYW55IGNvbnRlbnQgc2VsZWN0ZWQgcHJldmlvdXNseVxuICA/IGRvY3VtZW50LmdldFNlbGVjdGlvbigpLmdldFJhbmdlQXQoMCkgLy8gU3RvcmUgc2VsZWN0aW9uIGlmIGZvdW5kXG4gIDogZmFsc2U7IC8vIE1hcmsgYXMgZmFsc2UgdG8ga25vdyBubyBzZWxlY3Rpb24gZXhpc3RlZCBiZWZvcmVcblxuICBlbC5zZWxlY3QoKTsgLy8gU2VsZWN0IHRoZSA8dGV4dGFyZWE+IGNvbnRlbnRcblxuICBkb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScpOyAvLyBDb3B5IC0gb25seSB3b3JrcyBhcyBhIHJlc3VsdCBvZiBhIHVzZXIgYWN0aW9uIChlLmcuIGNsaWNrIGV2ZW50cylcbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbCk7IC8vIFJlbW92ZSB0aGUgPHRleHRhcmVhPiBlbGVtZW50XG5cbiAgaWYgKHNlbGVjdGVkKSB7XG4gICAgLy8gSWYgYSBzZWxlY3Rpb24gZXhpc3RlZCBiZWZvcmUgY29weWluZ1xuICAgIGRvY3VtZW50LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpOyAvLyBVbnNlbGVjdCBldmVyeXRoaW5nIG9uIHRoZSBIVE1MIGRvY3VtZW50XG4gICAgZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCkuYWRkUmFuZ2Uoc2VsZWN0ZWQpOyAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBzZWxlY3Rpb25cbiAgfVxufTtcblxudmFyIHBsdXJhbGl6ZSA9IGZ1bmN0aW9uKGNvdW50LCBub3VuLCBzdWZmaXggPSAncycpIHtcbiAgcmV0dXJuIGAke2NvdW50fSAke25vdW59JHtjb3VudCAhPT0gMSA/IHN1ZmZpeCA6ICcnfWA7XG59XG4gIFxuXG5cbmZ1bmN0aW9uIHRvZ2dsZVBhc3N3b3JkKGlucHV0KSB7XG4gIHZhciB4ID0gaW5wdXQ7XG4gIGlmICh4LnR5cGUgPT09IFwicGFzc3dvcmRcIikge1xuICAgIHgudHlwZSA9IFwidGV4dFwiO1xuICB9IGVsc2Uge1xuICAgIHgudHlwZSA9IFwicGFzc3dvcmRcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb3VudGRvd24oZHVyYXRpb24sIGRpc3BsYXkpIHtcbiAgdmFyIHRpbWVyID0gZHVyYXRpb24sIG1pbnV0ZXMsIHNlY29uZHM7XG4gIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIG1pbnV0ZXMgPSBwYXJzZUludCh0aW1lciAvIDYwLCAxMClcbiAgICAgIHNlY29uZHMgPSBwYXJzZUludCh0aW1lciAlIDYwLCAxMCk7XG5cbiAgICAgIGRpc3BsYXkudGV4dENvbnRlbnQgPSAgcGx1cmFsaXplKG1pbnV0ZXMsICQoZGlzcGxheSkuZGF0YSgnbWludXRlJykpICsgXCIgXCIgKyBwbHVyYWxpemUoc2Vjb25kcywgJChkaXNwbGF5KS5kYXRhKCdzZWNvbmQnKSk7XG5cbiAgICAgIGlmICgtLXRpbWVyIDwgMCkge1xuICAgICAgICAgIHRpbWVyID0gZHVyYXRpb247XG4gICAgICB9XG4gIH0sIDEwMDApO1xufVxuXG4kKGZ1bmN0aW9uKCkge1xuICB2YXIgYnV0dG9uTmFtZXMgPSBbJ1Nob3cgb3B0aW9ucycsICdEaXNhYmxlIG9wdGlvbnMnXVxuICB2YXIgY3JlYXRlRm9ybSA9ICQoJ2Zvcm0jY3JlYXRlTm9kZScpXG5cbiAgLy8gc2V0dGluZ3MgdG9vZ2dsZVxuICAkKFwiLnNldHRpbmdzLWJ1dHRvblwiKS5jbGljayhmdW5jdGlvbihlKXtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgJChcIi5zZXR0aW5ncy1ibG9ja1wiKS5zbGlkZVRvZ2dsZSgzNTAsIGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgYnV0dG9uID0gJCgnLnNldHRpbmdzLWJ1dHRvbiBkaXYnKTtcbiAgICAgIGlmIChidXR0b24udGV4dCgpID09PSBidXR0b24uZGF0YSgnY2xvc2UnKSkge1xuICAgICAgICBidXR0b24udGV4dChidXR0b24uZGF0YSgnb3BlbicpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnV0dG9uLnRleHQoYnV0dG9uLmRhdGEoJ2Nsb3NlJykpXG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIHJlYWQgcGFzc3dvcmQgdG9vZ2dsZVxuICAkKFwiI3JlYWRXaXRoUGFzc3dvcmRcIikuY2xpY2soZnVuY3Rpb24oZSl7XG4gICAgdmFyIGJ1dHRvbiA9ICQodGhpcyk7XG5cbiAgICBpZiAoYnV0dG9uLnRleHQoKSAhPT0gYnV0dG9uLmRhdGEoJ2Nsb3NlJykpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGJ1dHRvbi50ZXh0KGJ1dHRvbi5kYXRhKCdjbG9zZScpKVxuICAgIH1cblxuICAgICQoXCIuc2xpZGUtYmxvY2tcIikuc2xpZGVEb3duKDM1MCk7XG4gIH0pO1xuXG5cbiAgLy8gY3JlYXRlIHZhbGlkYXRlIGFuZCBzdWJtaXRcbiAgY3JlYXRlRm9ybS52YWxpZGF0ZSh7XG4gICAgcnVsZXM6IHtcbiAgICAgIG5vdGU6IHtcbiAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBwYXNzd29yZF9yZXBlYXQ6IHtcbiAgICAgICAgZXF1YWxUbzogXCIjcGFzc3dvcmRcIlxuICAgICAgfVxuICAgIH0sXG4gICAgc3VibWl0SGFuZGxlcjogZnVuY3Rpb24oZm9ybSkge1xuICAgICAgd2luZG93LmxvY2F0aW9uID0gJy9yZWFkeS5odG1sJ1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gY29weSBsaW5rXG4gICQoJyNjb3B5Tm90ZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgdmFyIHRleHRUb0NvcHkgPSAkKCcjbGluaycpLnRleHQoKTtcblxuICAgIGNvbnNvbGUubG9nKHRleHRUb0NvcHkpXG4gICAgY29weVRvQ2xpcGJvYXJkKHRleHRUb0NvcHkpO1xuXG4gICAgJCgnLnRvb2x0aXAtY29udGFpbmVyJykuYWRkQ2xhc3MoJ29wZW4nKTtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICQoJy50b29sdGlwLWNvbnRhaW5lcicpLnJlbW92ZUNsYXNzKCdvcGVuJyk7XG4gICAgfSwgMTAwMClcbiAgfSlcblxuICAkKCcjcGFzc1RvZ2dsZVRyaWdnZXInKS5vbignY2xpY2snLCBmdW5jdGlvbigpe1xuXG4gICAgdmFyIGlucHV0ID0gJCgnI3Bhc3NUb2dnbGUnKTtcbiAgICB2YXIgYnV0dG9uID0gJCgnI3Bhc3NUb2dnbGVUcmlnZ2VyJyk7XG4gICAgdG9nZ2xlUGFzc3dvcmQoaW5wdXRbMF0pXG4gICAgY29uc29sZS5sb2coJ2NsaWNrIDInLCBidXR0b24udGV4dCgpKTtcblxuICAgIGlmIChidXR0b24udGV4dCgpID09PSBidXR0b24uZGF0YSgnY2xvc2UnKSkge1xuICAgICAgYnV0dG9uLnRleHQoYnV0dG9uLmRhdGEoJ29wZW4nKSlcbiAgICB9IGVsc2Uge1xuICAgICAgYnV0dG9uLnRleHQoYnV0dG9uLmRhdGEoJ2Nsb3NlJykpXG4gICAgfVxuICB9KVxuXG4gIGlmICgkKCcjY291bnRkb3duJykubGVuZ3RoKSB7XG4gICAgdmFyIGZpdmVNaW51dGVzID0gNjAgKiA2MCxcbiAgICBkaXNwbGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvdW50ZG93bicpO1xuICBcbiAgICBjb3VudGRvd24oZml2ZU1pbnV0ZXMsIGRpc3BsYXkpO1xuICB9XG4gIFxufSk7Il19